# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do

  # Runs before all tasks
  before_all do

   # Add SLACK_URL & make it accessible to all lanes
   ENV["SLACK_URL"]
  end

  desc "Run unit tests"
  lane :unit_tests do |options|
    gradle(task: "test")
  end

  desc "Build a debug APK"
  lane :debug_build do
    gradle(task: "clean assembleDebug")
  end

  desc "Build a signed release APK & deploy to slack"
  lane :slack_apk_build do
    gradle(
      task: "assemble",
      build_type: "Release",
      print_command: false,
      properties: {
        "android.injected.signing.store.file" => "keystore.jks",
        "android.injected.signing.store.password" => ENV['STORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['KEY_ALIAS'],
        "android.injected.signing.key.password" => ENV['KEY_PASSWORD'],
      }
    )
    upload_to_slack()
    slack(message: ":rocket: *Build Successful!* :rocket:")
  end

  desc "Upload APK to Slack channel"
  private_lane :upload_to_slack do |options|
    file_path = lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]
    file_name = file_path.gsub(/\/.*\//,"")
    access_token = ENV["ACCESS_TOKEN"]
    channel_name = "apks"

    sh "echo Uploading " + file_name + " to Slack"
    sh "curl https://slack.com/api/files.upload -F token=\"" + access_token + "\" -F channels=\"" + channel_name + "\" -F title=\"" + file_name + "\" -F filename=\"" + file_name + "\" -F file=@" + file_path
  end

  # Runs after all tasks. This block is called only when the executed lane is successful
  after_all do |lane|

    # Slack action
    # slack(message: ":rocket: Successful Deployment! :rocket:")
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false
      )
  end

  desc "Deploy latest Beta build to Crashlytics Beta"
  lane :beta do
    gradle(task: "assembleRelease")
  end

  lane :distribute do |options|
    if options[:group]
      build_android_app(
        task: "assemble",
        flavor: "beta",
        build_type: "release"
      )

      firebase_app_distribution(
          # app: "1:646292848791:android:d4df2d386f0e10388aa9d2",
          app: "1:646292848791:android:5c8c643ea24364db8aa9d2",
          # app: "e8c6ee2d2fb16c7f0ff5e891c21494ecbe8b3735",
          groups: options[:group],
          # testers: "mfaiz236@gmail.com",
          release_notes: "Release Notes Updated 1.0.3",
          firebase_cli_path: "/usr/local/bin/firebase",
          firebase_cli_token: "1//0gDoSBB3ZnYrzCgYIARAAGBASNwF-L9IrRG_d6uewuLg6O4QJ8gwKTAl2CbCBWjpik9mwJflfTjaPEiEfo5gklpQ2oewe7xMimkU"
      )
    else
      UI.user_error!("Missing group name!")
    end
  end


 #Main Distribute lane
 # lane :distribute do    ENV['FIREBASE_APP_ID_ANDROID']
 #   gradle(task: "clean assembleRelease")    ENV['FIREBASE_CI_TOKEN']
 #     firebase_app_distribution(
 #        app: "1:646292848791:android:d4df2d386f0e10388aa9d2",
 #        firebase_cli_token: "1//0gI91yNlNq_ksCgYIARAAGBASNwF-L9IrNZ6idN62wUSXLGeSrAf4FXQ7VoaZYDKSwqf-Phg29_WvuNTxqDUQDdzwYXCNuPpX9d0",
 #        testers: "mfaiz236@gmail.com",
 #        release_notes: "Release Notes Updated 1.0.0"
 #     )
 # end



end